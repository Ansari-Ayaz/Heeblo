<style>
    .fa-square-check {
        color: green;
    }

    .fa-circle-xmark {
        background-color: green;
    }

    .submittedBy {
        font-weight: bold;
        text-decoration: underline;
        cursor: pointer;
    }

    .download {
        text-decoration: underline;
        cursor: pointer;
        color: blue;
    }
</style>
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    :root {
        --progress-bar-width: 50px;
        --progress-bar-height: 50px;
        --font-size: 0.7rem;
    }

    .circular-progress {
        width: var(--progress-bar-width);
        height: var(--progress-bar-height);
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .inner-circle {
        position: absolute;
        width: calc(var(--progress-bar-width) - 13px);
        height: calc(var(--progress-bar-height) - 13px);
        border-radius: 50%;
    }

    .percentage {
        position: relative;
        font-size: var(--font-size);
        color: white;
    }
</style>

<div class="card">
    <div class="card-body">
        <div class="row">
            <div class="col-md-12">
                <table id="tblApp" class="table table-sm table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>Sr No</th>
                            <th>Submitted By</th>
                            <th>Submitted On</th>
                            <th>AI Writen</th>
                            <th>Grammatical Error</th>
                            <th>Plagiarised</th>
                            <th>Average</th>
                            <th>Review</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div class="modal" id="writerModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Writer Details</h3>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-4"><p>Name:</p></div>
                    <div class="col-md-8"><p id="writerName"></p></div>
                </div>
                <div class="row">
                    <div class="col-md-4"><p>Email:</p></div>
                    <div class="col-md-8"><p id="writerEmail"></p></div>
                </div>
                <div class="row">
                    <div class="col-md-4"><p>Mobile:</p></div>
                    <div class="col-md-8"><p id="writerMobile"></p></div>
                </div>
                <div class="row">
                    <div class="col-md-4"><p>Resume:</p></div>
                    <div class="col-md-8"><p class="download" onclick="downloadResume()" id="writerResume"></p></div>
                </div>
                <div class="row">
                    <div class="col-md-4"><p>Sample Content:</p></div>
                    <div class="col-md-8"><p class="download" onclick="downloadSampleContent()" id="writerContent"></p></div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal" id="accRejModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Compose Message</h3>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <textarea class="form-control" id="txtAccRej" placeholder="Enter Mail Content" style="height: 170px;" required></textarea>
                </div>

                <button type="button" class="btn btn-primary" onclick="StatusUpdate()">Send Email</button>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        var params = new URLSearchParams(window.location.search)
        var pid = params.get('pid');
        var resumeB64 = "";
        var contentB64 = "";
        var resumeFileName = "";
        var contentFileName = "";

        function InitCircular(){
            
            const circularProgress = document.querySelectorAll(".circular-progress");

            Array.from(circularProgress).forEach((progressBar) => {
                const progressValue = progressBar.querySelector(".percentage");
                const innerCircle = progressBar.querySelector(".inner-circle");
                let startValue = 0,
                    endValue = Number(progressBar.getAttribute("data-percentage")),
                    speed = 50,
                    progressColor = progressBar.getAttribute("data-progress-color");

                const progress = setInterval(() => {
                    if (endValue === 0) {
                        innerCircle.style.backgroundColor = `${progressBar.getAttribute(
                            "data-inner-circle-color"
                        )}`;

                        progressBar.style.background = `conic-gradient(${progressColor} ${startValue * 3.6
                            }deg,${progressBar.getAttribute("data-bg-color")} 0deg)`;
                        clearInterval(progress);
                        return
                    }
                    startValue++;
                    progressValue.textContent = `${startValue}%`;

                    innerCircle.style.backgroundColor = `${progressBar.getAttribute(
                        "data-inner-circle-color"
                    )}`;

                    progressBar.style.background = `conic-gradient(${progressColor} ${startValue * 3.6
                        }deg,${progressBar.getAttribute("data-bg-color")} 0deg)`;
                    if (startValue === endValue) {
                        clearInterval(progress);
                    }
                }, speed);
            });
        }

        $(document).ready(function() {
            GetAllApplications();
            InitCircular();
        })
        function GetAllApplications() {
            $('#tblApp').DataTable().destroy();
            $("#tblApp").dataTable({
                "ajax": {

                    url: '@(Url.Action("GetApplicationByPid","Application"))' + '/' + pid,
                    type: "GET",
                    dataType: "JSON",
                    contentType: "application/json",
                    async: false,
                    dataSrc: ""
                },
                "columns": [
                    {
                        "targets": 0,
                        "render": function(data, type, row, meta) {
                            return meta.row + 1;
                        }
                    },
                    {
                        "data": null,
                        "render": function(a, b, c) {
                            return '<p class="submittedBy" onclick="showWriterDetails(' + c.application_id + ')">' + c.created_by + '</p>'
                        }
                    },
                    {
                        "data": null,
                        "render": function(a, b, c) {
                            return moment(c.created_on).format("YYYY-MM-DD");
                        }
                    },
                    {
                        "data": null,
                        "className": "",
                        "render": function(a, b, c) {
                            var a = Math.floor(c.ai_score.toFixed(2));

                            return `<div class="circular-progress m-auto" data-inner-circle-color="#006480" data-percentage="${a}" data-progress-color="#d6c494" data-bg-color="white">
                            <div class="inner-circle"></div>
                            <p class="percentage m-auto" style="color:white;">0%</p>
                        </div>`
                        }
                    },
                    //{
                    //    "data": null,
                    //    "render": function(a, b, c) {
                    //        return c.ai_score + " %"
                    //    }
                    //},
                    {
                        "data": null,
                        "render": function(a, b, c) {
                            var g = Math.floor(c.grammar_score.toFixed(2));
                            return `<div class="circular-progress m-auto" data-inner-circle-color="#006480" data-percentage="${g}" data-progress-color="#d6c494" data-bg-color="white">
                            <div class="inner-circle"></div>
                            <p class="percentage m-auto" style="color:white;">0%</p>
                        </div>`
                        }
                    },
                    //{
                    //    "data": null,
                    //    "render": function(a, b, c) {
                    //        return c.grammar_score + " %"
                    //    }
                    //},
                    {
                        "data": null,
                        "className": "",
                        "render": function(a, b, c) {
                            var p = Math.floor(c.plagiarism.toFixed(2));

                            return `<div class="circular-progress m-auto" data-inner-circle-color="#006480" data-percentage="${p}" data-progress-color="#d6c494" data-bg-color="white">
                            <div class="inner-circle"></div>
                            <p class="percentage m-auto" style="color:white;">0%</p>
                        </div>`
                        }
                    },
                    //{
                    //    "data": null,
                    //    "render": function(a, b, c) {
                    //        return c.plagiarism + " %"
                    //    }
                    //},
                    //{
                    //    "data": null,
                    //    "render": function(a, b, c) {
                    //        var averageScore = (c.plagiarism + c.grammar_score + c.ai_score) / 3;
                    //        return '<p>' + averageScore.toFixed(2) + ' %</p>';
                    //    }
                    //},
                    {
                        "data": null,
                        "className": "",
                        "render": function(a, b, c) {
                            var averageScore = (c.plagiarism + c.grammar_score + c.ai_score) / 3;
                            var averageScore = Math.floor(averageScore.toFixed(2));

                            return `<div class="circular-progress m-auto" data-inner-circle-color="#006480" data-percentage="${averageScore}" data-progress-color="#d6c494" data-bg-color="white">
                            <div class="inner-circle"></div>
                            <p class="percentage m-auto" style="color:white;">0%</p>
                        </div>`
                        }
                    },
                    {
                        "data": null,
                        "render": function(a, b, c) {
                            if (c.status == "Accepted") {
                                return ' <label for="inputField" class="col-form-label" >Accepted</label>'
                            } else if (c.status == "Rejected") {
                                return ' <label for="inputField" class="col-form-label" ">Rejected</label>'
                            } else {
                                return `<div class="d-flex"><button class="btn btn-sm btn-primary mx-2" onclick="OnStatusClick('Accepted', ${c.application_id},'${c.created_by}')">Accept</button><button class="btn btn-sm btn-danger mx-2" onclick="OnStatusClick('Rejected', ${c.application_id},'${c.created_by}')">Reject</button></div>`
                            }

                        }

                    }

                ]
            }).on('draw.dt', function(){
                InitCircular();
            })
        }
        var status;
        var appId;
        function OnStatusClick(s, id, name) {
            status = s;
            appId = id;
            name = name.charAt(0).toUpperCase() + name.slice(1)
            $('#accRejModal').modal('show');
            if (s == 'Accepted') $("#txtAccRej").val(`Dear ${name},

                Congratulations! We are pleased to inform you that you have been selected for the position at [Company Name]. We were impressed with your qualifications, skills, and experience, and believe you will be a valuable addition to our team. We look forward to welcoming you onboard.

                Please let us know your availability for further discussions and any necessary next steps.

                Best regards,
                [Your Name]
                [Company Name]`);

            else $("#txtAccRej").val(`Dear ${name},

                Thank you for your interest in [Company Name]. We appreciate the time and effort you put into your application. After careful consideration, we regret to inform you that we have chosen to proceed with other candidates who closely match our requirements. We sincerely appreciate your interest and wish you the best in your job search.

                Best regards,
                [Your Name]
                [Company Name]`);

        }
        function StatusUpdate() {
            var reqObj = {
                status: status,
                appId: appId,
                bodyString: $('#txtAccRej').val()
            }
            $.ajax({
                url: '@Url.Action("ApplicationStatus","Application")',
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(reqObj),
                async: false,
                success: function(resp) {
                    $("#txtAccRej").val('')
                    $('#accRejModal').modal('hide');
                    GetAllApplications();
                    Swal.fire('Email Sent', '', 'success');
                },
                error: function(err) {
                    Swal.fire('Email Not Sent', '', 'error');
                }
            })
        }
        function badge_1(val) {
            if (val > 0 && val <= 25) return `<span class="badge badge-danger ">${val} %</span>`;
            if (val > 25 && val <= 50) return `<span class="badge badge-warning ">${val} %</span>`;
            if (val > 50 && val <= 75) return `<span class="badge badge-info ">${val} %</span>`;
            if (val > 75 && val <= 100) return `<span class="badge badge-success ">${val} %</span>`;
            return ``;
        }
        function badge_2(val) {
            if (val > 0 && val <= 25) return `<span class="badge badge-success ">${val} %</span>`;
            if (val > 25 && val <= 50) return `<span class="badge badge-info ">${val} %</span>`;
            if (val > 50 && val <= 75) return `<span class="badge badge-warning ">${val} %</span>`;
            if (val > 75 && val <= 100) return `<span class="badge badge-danger ">${val} %</span>`;
            return ``;
        }
        function showWriterDetails(app_id) {
            $('#writerName').text('');
            $('#writerEmail').text('');
            $('#writerMobile').text('');
            $('#writerResume').text('');
            $('#writerContent').text('');
            resumeB64 = "";
            contentB64 = "";
            $.ajax({
                url: '@Url.Action("GetUserDetailsByAppId","Application")' + '/' + app_id,
                type: 'GET',
                contentType: 'application/json',
                success: function(resp) {
                    $('#writerName').text(resp.name);
                    $('#writerEmail').text(resp.email);
                    $('#writerMobile').text(resp.mobile);
                    $('#writerResume').text(resp.resume_filename);
                    $('#writerContent').text(resp.sample_content_filename);
                    resumeB64 = resp.resume;
                    contentB64 = resp.sample_content;
                    resumeFileName = resp.resume_filename;
                    contentFileName = resp.sample_content_filename;

                },
                error: function(err) {
                    alert('Something went wrong')
                }
            })
            $('#writerModal').modal('show');
        }

        function downloadResume() {
            var blob = base64ToBlob(resumeB64, resumeFileName);
            var downloadLink = document.createElement('a');
            downloadLink.href = URL.createObjectURL(blob);
            downloadLink.download = resumeFileName;

            document.body.appendChild(downloadLink);
            downloadLink.click();
            document.body.removeChild(downloadLink);
        }

        function downloadSampleContent() {
            var blob = base64ToBlob(contentB64, contentFileName);
            var downloadLink = document.createElement('a');
            downloadLink.href = URL.createObjectURL(blob);
            downloadLink.download = contentFileName;

            document.body.appendChild(downloadLink);
            downloadLink.click();
            document.body.removeChild(downloadLink);
        }

        function base64ToBlob(base64Data, fileName) {
            var contentType = '';
            var fileExtension = fileName.substr(fileName.lastIndexOf('.') + 1);

            switch (fileExtension.toLowerCase()) {
                case 'txt':
                    contentType = 'text/plain';
                    break;
                case 'pdf':
                    contentType = 'application/pdf';
                    break;
                case 'jpg':
                case 'jpeg':
                    contentType = 'image/jpeg';
                    break;
                case 'png':
                    contentType = 'image/png';
                    break;
                case 'doc':
                    contentType = 'application/msword';
                    break;
                case 'docx':
                    contentType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
                    break;
                // Add more cases for other file extensions if needed
                default:
                    contentType = 'application/octet-stream';
            }

            contentType = contentType || '';

            var sliceSize = 1024;
            var byteCharacters = atob(base64Data);
            var byteArrays = [];

            for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                var slice = byteCharacters.slice(offset, offset + sliceSize);

                var byteNumbers = new Array(slice.length);
                for (var i = 0; i < slice.length; i++) {
                    byteNumbers[i] = slice.charCodeAt(i);
                }

                var byteArray = new Uint8Array(byteNumbers);
                byteArrays.push(byteArray);
            }
            return new Blob(byteArrays, { type: contentType });
        }

    </script>
}